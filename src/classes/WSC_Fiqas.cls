public with sharing class WSC_Fiqas {
	public WSC_Fiqas() {}

	public static Webservice_Settings__c WS 	= Webservice_Settings__c.getInstance(UTIL.isSandbox()?'FIQAS_UAT':'FIQAS_PROD');
	private static final String ENDPOINT     	= (!Test.IsRunningTest())?(WS.UseProxy__c?WS.EndpointProxy__c:WS.Endpoint__c):'testendpoint';
	private static final String WSUSER          = (!Test.IsRunningTest())?WS.User__c:'testuser';
    private static final String WSKEYSTRING     = (!Test.IsRunningTest())?WS.Key__c:'testkey';
    public static Set<Id> accIdsSynced = new Set<Id>(); // Set of Account Ids that have been synced to Fiqas. Fiqas sync nly runs once per account / context.
    
    private static void addGenericConfig(UTIL_WSC.basicCallout co) {
        co.params.put('user', WSUSER);
		co.params.put('challenge', 0);
		co.params.put('key', WSKEYSTRING);
		co.params.put('tranid', 0);        
        co.reqType = UTIL_WSC.reqType.URLENCODED;
    }

    public static FiqasResponse customerGet(String custNr) { // should return FiqasResponse
    	UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('customerGet', ENDPOINT + 'Ebay_Customer_Get', 'POST');
        FiqasResponse fr = new FiqasResponse();
		addGenericConfig(co);
        co.params.put('CustNr', custNr);
        co.mockResponseBody = getCustomerGetMock(custNr!='UnknownNumber');
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'Ebay_Customer_GetOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
    }
    
    public static FiqasResponse customerUpsert(Account acc) {
        
        if (!acc.FQ_syncAccountDetails__c && !acc.FQ_syncPaymentMethod__c && !acc.FQ_syncMandateInfo__c && !acc.FQ_syncCmrLink__c ) return null;
        
        String CustNr = String.isEmpty(acc.FQ_CustNr__c) ? acc.AccountExtId__c : acc.FQ_CustNr__c;
        FiqasResponse frGet = customerGet(CustNr);
        FiqasResponse frUpsert;
        FiqasResponse frDDInsert;
        FiqasResponse frPIChange;
        FiqasResponse cmrLinkChange;
        
        FiqasResponse resultResponse;
        
        
        If ( frGet.getFirstElement().succes() ){
            frUpsert = WSC_Fiqas.customerUpdate(acc);
            if (acc.FQ_syncPaymentMethod__c) {
                frPIChange = WSC_Fiqas.customerPaymentInfoChange(acc); 
            }
            if (acc.FQ_syncCmrLink__c){
                cmrLinkChange = WSC_Fiqas.customerCmrLinkChange(acc); 
            }
        }
        else {
            frUpsert = WSC_Fiqas.customerInsert(acc);
        }
        
        if (acc.FQ_syncMandateInfo__c){
            frDDInsert = WSC_Fiqas.customerDirectDebitDetailsInsert(acc);
        }
        
        
        resultResponse = frUpsert;
        
        if (frPIChange != null && !frPIChange.getFirstElement().succes()){
            resultResponse = frPIChange;
        }
        else if (frDDInsert != null && !frDDInsert.getFirstElement().succes()){
            resultResponse = frDDInsert;
        }
        else if (cmrLinkChange != null && !cmrLinkChange.getFirstElement().succes()) {
            resultResponse = cmrLinkChange;
        }
        
        return resultResponse;
    }
    
    public static FiqasResponse customerInsert(Account acc) {
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('customerInsert', ENDPOINT + 'Ebay_Customer_Insert', 'POST');
        FiqasResponse fr = new FiqasResponse();
		addGenericConfig(co);
        co.params.putAll( getFiqasAccountInput(acc).getOutputMap() );        co.mockResponseBody = getCustomerInsertMock();
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'Ebay_Customer_InsertOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
        
    }
    
    //PaymentInfo_Change 
    //https://ebayukapiuat.billing.nl/adaptapi.asmx/PaymentInfo_Change
    //
    //user:	
    //challenge:	
    //key:	
    //tranid:	
    //CustNr:	
    //PayMethActiveFrom:	
    //PayMethType:	
    //PayMethAccountNr:	
    //PayMethAccountHolder:	
    //PayMethBankName:	
    //PayMethBankCity:	
    //
    public static FiqasResponse customerPaymentInfoChange(Account acc) {
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('customerPaymentInfoChange', ENDPOINT + 'PaymentInfo_Change', 'POST');
        FiqasResponse fr = new FiqasResponse();
		addGenericConfig(co);
        co.params.putAll( getFiqasAccountInput(acc).getOutputMap() );        
        co.mockResponseBody = getCustomerPaymentInfoChangeMock();
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'PaymentInfo_ChangeOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
        
    }
    
    public static FiqasResponse invoicesGet(String custNr) { // should return FiqasResponse
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('invoicesGet', ENDPOINT + 'EBAY_Invoices_Get_Since', 'POST');
        FiqasResponse fr = new FiqasResponse();
        addGenericConfig(co);
        co.params.put('CustNrs', custNr);
        date setDate = date.today().addMonths(-2);
        string dateFQFormat = string.valueof(setDate.Year()) + string.valueof('0' + setDate.Month()).right(2) + string.valueof('0' + setDate.Day()).right(2);
        co.params.put('ChangedSince', dateFQFormat);
        co.mockResponseBody = getInvoicesMock();
        HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
        UTIL.Log(resp.getBody());
        fr = parseFiqasResponse(resp.getBody(),'EBAY_Invoices_Get_SinceOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
    }
       
    public static FiqasResponse invoiceGetPDF(String invNr) { // should return FiqasResponse
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('invoicesGetPDF', ENDPOINT + 'GetDocument', 'POST');
        FiqasResponse fr = new FiqasResponse();
        addGenericConfig(co);
        co.params.put('InvoiceNo', invNr);
        co.mockResponseBody = getInvoicePDFMock();
        HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
        UTIL.log('TEST: ' + resp.getBody());
        fr = parseFiqasResponse(resp.getBody(),'GetDocument');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
    }
    
    
    //eBay_SEPADetails_Insert
    //https://ebayukapiuat.billing.nl/adaptapi.asmx/eBay_SEPADetails_Insert
    //
    //user:	
	//challenge:	
	//key:	
	//tranid:	
	//CustNr:	
	//PayMethActiveFrom:	
	//IBAN:	
	//BIC:	
	//AccName:	
	//MandateID:	
	//MandateSignDate:
	
    public static FiqasResponse customerDirectDebitDetailsInsert(Account acc) {
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('customerDirectDebitDetailsInsert', ENDPOINT + 'eBay_SEPADetails_Insert', 'POST');
        FiqasResponse fr = new FiqasResponse();
		addGenericConfig(co);
        co.params.putAll( getFiqasAccountInput(acc).getOutputMap() );        
        co.mockResponseBody = getCustomerDirectDebitDetailsInserMock();
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'eBay_SEPADetails_InsertOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
        
    }
    
    public static FiqasResponse customerCmrLinkChange(Account acc) {
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('customerCmrLinkChange', ENDPOINT + 'CmrLink_Change', 'POST');
        FiqasResponse fr = new FiqasResponse();
		addGenericConfig(co);
        co.params.putAll( getFiqasAccountInput(acc).getOutputMap() );        
        co.mockResponseBody = getCustomerCmrLinkChangeMock();
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'CmrLink_ChangeOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
    }
    
    public static FiqasResponse invoiceLineInsert(InvoiceLine__c il) {
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('invoiceLineInsert', ENDPOINT + 'EBAY_InvoiceLine_Insert', 'POST');
        FiqasResponse fr = new FiqasResponse(); 
		addGenericConfig(co);
        co.params.putAll( getFiqasInvoiceInput(il).getOutputMap() );
        co.mockResponseBody = getInvoiceLineInsertMock();
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'Ebay_InvoiceLine_InsertOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;  
    }
    
    public static FiqasResponse customerUpdate(Account acc) {
        UTIL_WSC.basicCallout co = new UTIL_WSC.basicCallout('customerInsert', ENDPOINT + 'Ebay_Customer_Update', 'POST');
        FiqasResponse fr = new FiqasResponse();
		addGenericConfig(co);
        co.params.putAll( getFiqasAccountInput(acc).getOutputMap() );
        co.mockResponseBody = getCustomerUpdateMock();
		HttpResponse resp = co.call();
        if ( resp.getStatusCode() != 200 ) return getHTTPerrorResponseElement(resp);
     	fr = parseFiqasResponse(resp.getBody(),'Ebay_Customer_UpdateOut');
        if (fr == null ) throw new UTIL.CustomException('Cannot parse Fiqas response: '+resp.getBody() );
        return fr;
    }
    private static FiqasResponse getHTTPerrorResponseElement(HttpResponse resp) {
        FiqasResponse fr = new FiqasResponse();
        FiqasResponseElement fre = new FiqasResponseElement();
        fre.reason = resp.getStatus();
        fre.status = 'HTTP error: ' + resp.getStatusCode().format();
        fre.data = new Map<String,String>();
        fr.elements.add(fre);
        return fr; 
    }
    
    private static String getCustomerGetMock(Boolean success) {
        if (success) return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_GetOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_Customer_GetOut></ArrayOfEbay_Customer_GetOut>';
        else return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_GetOut Status="FAILED" Reason="-1 - Customer ID does not exist!" /></ArrayOfEbay_Customer_GetOut>';
    }
    private static String getCustomerInsertMock() {
        //return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_GetOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_Customer_GetOut></ArrayOfEbay_Customer_GetOut>';
        return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_InsertOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_Customer_InsertOut></ArrayOfEbay_Customer_GetOut>';
    }
    private static String getCustomerUpdateMock() {
        //return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_GetOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_Customer_GetOut></ArrayOfEbay_Customer_GetOut>';
    	return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_UpdateOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_Customer_UpdateOut></ArrayOfEbay_Customer_GetOut>';
    }
    private static String getInvoiceLineInsertMock() {
        //return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_Customer_GetOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_Customer_GetOut></ArrayOfEbay_Customer_GetOut>';
        return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEbay_Customer_GetOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><Ebay_InvoiceLine_InsertOut Status="OK"><CustNr>GTTEST01234</CustNr><CustParentNr></CustParentNr><CustBillParentNr></CustBillParentNr><CustType>Banners</CustType><CustStatus>Active</CustStatus><CustName>TestCustomer</CustName><CustNameExtra> </CustNameExtra><CustVATYn>1</CustVATYn><CustEmail></CustEmail><CustVATNo></CustVATNo><CustRegNo></CustRegNo><CustInfo1></CustInfo1><CustInfo2></CustInfo2><AddressStreet>Street</AddressStreet><AddressNumber>12</AddressNumber><AddressNumberExtra>x</AddressNumberExtra><AddressZipcode>1234AA</AddressZipcode><AddressCity>Amsterdam</AddressCity><AddressCountry>Nederland</AddressCountry><ContactFirstName>First</ContactFirstName><ContactMiddleName> </ContactMiddleName><ContactLastName>Last</ContactLastName><ContactTitle> </ContactTitle><ContactSalutation> </ContactSalutation><ContactSexe>1</ContactSexe><BillingCycle>Default AU Cycle</BillingCycle><CmrType>Banners</CmrType></Ebay_InvoiceLine_InsertOut></ArrayOfEbay_Customer_GetOut>';
    }
    
    private static String getCustomerPaymentInfoChangeMock() {
        return '<?xml version="1.0" encoding="utf-8"?> <ArrayOfPaymentInfo_ChangeOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"> <PaymentInfo_ChangeOut Status="OK" Reason=" " /> </ArrayOfPaymentInfo_ChangeOut>';
    }
    
    private static String getInvoicesMock(){
        return '<?xml version="1.0" encoding="utf-8"?><ArrayOfEBAY_Invoices_Get_SinceOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><EBAY_Invoices_Get_SinceOut Status="OK"><CustNr>GTTEST01234</CustNr><InvoiceNumber>12345</InvoiceNumber><InvoiceDate>20141119</InvoiceDate><InvoiceAmount>40702.20</InvoiceAmount><IndividualInvoiceId></IndividualInvoiceId><LatestPaymentDate>20150121</LatestPaymentDate><InvoicePaymentStatus>Paid</InvoicePaymentStatus><InvoiceDescription>Factuur 12345</InvoiceDescription><InvoicePeriodFrom>20141001</InvoicePeriodFrom><InvoicePeriodTo>20141031</InvoicePeriodTo><InvoiceAmountPaid>40702.20</InvoiceAmountPaid><DunningBlockType></DunningBlockType><DunningBlockStartDate></DunningBlockStartDate><DunningBlockEndDate></DunningBlockEndDate><DunningBlockReason></DunningBlockReason></EBAY_Invoices_Get_SinceOut></ArrayOfEBAY_Invoices_Get_SinceOut>';
    }
    
    private static String getInvoicePDFMock(){
        return '<?xml version="1.0" encoding="utf-8"?><ArrayOfGetDocumentOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"><GetDocumentOut Status="OK" Reason=""><PDFFile></PDFFile></GetDocumentOut></ArrayOfGetDocumentOut>';
    }
    
    private static String getCustomerDirectDebitDetailsInserMock() {
        return '<?xml version="1.0" encoding="utf-8"?> <ArrayOfEBay_SEPADetails_InsertOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"> <eBay_SEPADetails_InsertOut Status="OK" Reason=" " /> </ArrayOfEBay_SEPADetails_InsertOut>';
    }
    
    private static String getCustomerCmrLinkChangeMock() {
        return '<?xml version="1.0" encoding="utf-8"?> <ArrayOfCmrLink_ChangeOut xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.fiqas.nl/AdaptAPI/"> <CmrLink_ChangeOut Status="OK" Reason=" "/> </ArrayOfCmrLink_ChangeOut>';
    }
    
            
    private static FiqasResponse parseFiqasResponse(String response, String parentNode){
        
        Dom.Document doc = new Dom.Document();
        doc.load(response);
        
        Dom.XMLNode responseLines = doc.getRootElement();
        
        FiqasResponse fr = new FiqasResponse();

        for(Dom.XmlNode parent : responseLines.getChildElements()){
            
            FiqasResponseElement fre = new FiqasResponseElement();
            fre.data = new Map<String,String>();            
            fre.status = parent.getAttribute('Status', '');
            fre.reason = parent.getAttribute('Reason', '');
            
            for(Dom.XmlNode child : parent.getChildElements()){
                fre.data.put(child.getName(), child.getText());
            }
            fr.elements.add(fre);
            
        }
        
        return fr;
    }
    
    public static UTIL_Fieldmapper getFiqasInvoiceInput(InvoiceLine__c il) { 
        Invoice__c	inv;
        RS__c 		rs;
        Rev__c 		rev;
        Opportunity opp;
        Account 	billingAcc;
        Account 	acc;
        Product2 	prod;
        Contact		pContact;
        
        inv 		= (Invoice__c) UTIL.getCached(il.Invoice__c);
        billingAcc 	= (Account) UTIL.getCached(inv.BillingAccount__c);
        
        if (il.RS__c != null) {
            rs =        (RS__c) UTIL.getCached(il.RS__c);
            if (rs != null) { 
                rev =       (Rev__c) UTIL.getCached(rs.Rev__c);
                opp =       (Opportunity) UTIL.getCached(rev.Opportunity__c);
                acc =       (Account) UTIL.getCached(opp.AccountId);
                prod =      (Product2) UTIL.getCached(rev.Product__c);
                pContact =  (Contact) UTIL.getCached(opp.Primary_Contact__c); 
            }
        }
        else if (il.Rev__c != null) {
            rev = 		(Rev__c) UTIL.getCached(il.Rev__c);
        	opp = 		(Opportunity) UTIL.getCached(rev.Opportunity__c);
        	acc = 		(Account) UTIL.getCached(opp.AccountId);
        	prod = 		(Product2) UTIL.getCached(rev.Product__c);
        	pContact = 	(Contact) UTIL.getCached(opp.Primary_Contact__c); 
        }

        if ( rs == null ) 		{ rs = new RS__c(); }
        if ( rev == null ) 		{ rev = new Rev__c(); }
        if ( opp == null ) 		{ opp = new Opportunity(); }
        if ( acc == null ) 		{ acc = new Account(); }
        
        
        if ( prod==null ) 		{ prod = new Product2(); }
        if ( pContact==null) 	{ pContact = new Contact(); }
               
        UTIL_Fieldmapper mapper = new UTIL_Fieldmapper();
        
		mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustNr', 			String.isEmpty(billingAcc.FQ_CustNr__c) ? billingAcc.AccountExtId__c : billingAcc.FQ_CustNr__c, 'String', 15, TRUE)); //acc.Fiqas_external_id__c == null ? acc.Account_Number_Fiqas__c : acc.fiqas_external_id__c
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ProductType', 		il.FQ_ProductType__c, 'String', 25, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ProductSubtype', 	il.FQ_ProductSubType__c, 'String', 25, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ProductCode', 		il.FQ_ProductCode__c, 'String', 15, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('Reference', 		opp.IOnumber__c, 'String', 25, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('UnitLabel', 		prod.Unit_Label__c, 'String', 10, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('UnitCount', 		il.Quantity__c.round(System.RoundingMode.CEILING).intValue().format().replace('.', '').replace(',', '') , 'String', 15, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('UnitPrice', 		il.UnitPrice__c.setScale(2, RoundingMode.HALF_UP).toPlainString() , 'String', 20, FALSE)); // N(15,4) in Fiqas
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('Description', 		il.InvoiceLineDescription__c, 'String', 150, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('Amount', 			il.Amount__c.setScale(2, RoundingMode.HALF_UP).toPlainString() , 'String', 20, TRUE));  // N(15,4) in Fiqas
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('VatPercentage', 	il.VatPercentage__c, 'String', 2, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('VatType', 			'0', 'String', 1, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AmountPaid', 		'0', 'String', 18, TRUE)); // N(15,2) in Fiqas
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('StartDate', 		(il.StartDate__c == null ? ((Datetime)System.today()).format('yyyyMMdd') : ((Datetime)il.StartDate__c).format('yyyyMMdd')), 'String', 8, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('EndDate', 			(il.EndDate__c == null ? ((Datetime)System.today()).format('yyyyMMdd') : ((Datetime) il.EndDate__c).format('yyyyMMdd')), 'String', 8, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('IndividualInvoice', il.Invoice__c, 'String', 20, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoiceExtra1', 	pContact.FirstName, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoiceExtra2', 	pContact.LastName, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoiceExtra3', 	pContact.Email, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoiceExtra4', 	inv.InvoiceDescription__c, 'String', 250, FALSE)); // changed from opp.Name
		mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoiceExtra5', 	opp.P_O_Number__c, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoicelineExtra1', acc.Name, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoicelineExtra2', opp.P_O_Number__c, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoicelineExtra3', acc.AccountExtId__c, 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoicelineExtra4', (rev.BundleSize__c == null) ? '' : rev.BundleSize__c.round().intValue().format().replace('.', '').replace(',', ''), 'String', 250, FALSE));
        //mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoicelineExtra5', (il.TotalListPriceCorrection__c == null || il.TotalListPriceCorrection__c>0) ? '' : il.TotalListPriceCorrection__c.setScale(2, RoundingMode.HALF_UP).toPlainString(), 'String', 250, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('InvoicelineExtra5', (rev.ListPriceCorrectionForm__c == null || rev.ListPriceCorrectionForm__c>0) ? '' : rev.ListPriceCorrectionForm__c.setScale(2, RoundingMode.HALF_UP).toPlainString(), 'String', 250, FALSE));
        return mapper;
    }
    public static UTIL_Fieldmapper getFiqasAccountInput(Account acc) { 
        UTIL_Fieldmapper mapper = new UTIL_Fieldmapper();
        
        Contact financeContact = (Contact) UTIL.getCached(acc.Finance_Contact__c);
        
        echosign_dev1__SIGN_Agreement__c agreement = (echosign_dev1__SIGN_Agreement__c) UTIL.getCached(acc.Mandate__c);
        
        if (financeContact==null) 	{ financeContact = new Contact(); }
        if (agreement == null) { agreement = new echosign_dev1__SIGN_Agreement__c(); }

        String custEmail = financeContact.Email;
        if (null != acc.PaperInvoiceEmail__c) {
            custEmail += ';' + acc.PaperInvoiceEmail__c; 
        }
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustNr', 			String.isEmpty(acc.FQ_CustNr__c) ? acc.AccountExtId__c : acc.FQ_CustNr__c, 'String', 15, TRUE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustParentNr', 		'', 'String', 15, FALSE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustBillParentNr', 	'', 'String', 15, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustType', 			acc.FQ_CustomerType__c, 'String', 50, FALSE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustStatus', 		(acc.Account_Status__c == 'Closed') ? 'Active' : acc.Account_Status__c , 'String', 50, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustName', 			acc.Name, 'String', 50, TRUE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustNameExtra', 	'', 'String', 50, FALSE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustVATYn', 		acc.Apply_VAT__c?'1':'0', 'String', 2, TRUE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustEmail', 		custEmail, 'String', 200, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustVATNo', 		acc.Company_VAT_No__c, 'String', 25, FALSE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustRegNo', 		acc.Company_Reg_No__c, 'String', 25, FALSE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustInfo1', 		'', 'String', 15, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CustInfo2', 		'', 'String', 15, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AddressStreet', 	acc.BillingStreet, 'String', 50, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AddressNumber', 	String.valueOf(acc.BillingHouseNumber__c), 'String', 10, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AddressNumberExtra', '', 'String', 50, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AddressZipcode', 	acc.BillingPostalCode, 'String', 9, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AddressCity', 		acc.BillingCity, 'String', 50, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AddressCountry', 	acc.BillingCountryCode, 'String', 15, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ContactFirstName', 	financeContact.FirstName, 'String', 50, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ContactMiddleName', '', 'String', 50, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ContactLastName', 	financeContact.LastName, 'String', 50, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ContactTitle', 		financeContact.Title, 'String', 50, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ContactSalutation', financeContact.Salutation, 'String', 50, FALSE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ContactSexe', 		String.valueOf(financeContact.Sex__c), 'String', 2, TRUE));
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('BillingCycle', 		acc.FQ_BillingCycle__c, 'String', 50, FALSE));
        //CmrLink_Change
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('CmrType', 			acc.FQ_CmrType__c, 'String', 50, TRUE));//
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('ActiveFrom', 		'20150101', 'String', 8, TRUE));


        //PayMethType:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('PayMethType', 		acc.Billing_Preference__c == 'Direct Debit' ? (agreement.Mandate_Id__c != null && agreement.echosign_dev1__Status__c == 'Signed' ? 'SEPA' : 'Invoice') : acc.Billing_Preference__c, 'String', 50, TRUE));

        //PayMethActiveFrom:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('PayMethActiveFrom', acc.BillingPreferenceValidFrom__c == null ? '' :((Datetime) acc.BillingPreferenceValidFrom__c).format('yyyyMMdd'), 'Date', 8, (acc.FQ_syncPaymentMethod__c || acc.FQ_syncMandateInfo__c)  ));

        UTIL.log('Tester:' + acc.Bank_AccountNumber__c);
        //PayMethAccountNr:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('PayMethAccountNr', 	acc.Bank_AccountNumber__c == null ? '' : acc.Bank_AccountNumber__c, 'String', 50, acc.Billing_Preference__c == 'Direct Debit'));
        //PayMethAccountHolder: ?? Can this always be the Account Name or should we have another field for this?
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('PayMethAccountHolder', '', 'String', 50, FALSE));	//Maybe the full name of the finance contact?
        //PayMethBankName:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('PayMethBankName', 	acc.Bank_Name__c == null ? '' : acc.Bank_Name__c, 'String', 50, acc.Billing_Preference__c == 'Direct Debit'));
        //PayMethBankCity: ?? Is this required? We are not storing this now..
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('PayMethBankCity', 	'', 'String', 50, FALSE)); //Not used on Salesforce.com site yet.
        //IBAN:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('IBAN',				agreement.Bank_AccountNumber__c == null ? '' : agreement.Bank_AccountNumber__c, 'String', 34, acc.FQ_syncMandateInfo__c));
        //BIC: Still required for FIQAS.
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('BIC', 				'', 'String', 11, acc.FQ_syncMandateInfo__c));
        //AccName:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('AccName', 			agreement.Bank_Account_Holder_Name__c == null ? '' : agreement.Bank_Account_Holder_Name__c , 'String', 50, FALSE));//Maybe the full name of the finance contact?
        //MandateID:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('MandateId', 		agreement.Mandate_Id__c == null ? '' : agreement.Mandate_Id__c, 'String', 50, acc.FQ_syncMandateInfo__c));
        //MandateSignDate:
        mapper.fields.add(new UTIL_Fieldmapper.mappedField('MandateSignDate', 	acc.BillingPreferenceValidFrom__c == null ? '' :((Datetime) acc.BillingPreferenceValidFrom__c).format('yyyyMMdd'), 'Date', 8, acc.FQ_syncMandateInfo__c));
        return mapper;
    }
    public class FiqasResponse {
        public Datetime timestamp;
        public List<FiqasResponseElement> elements;
        
        public FiqasResponse() {
            this.elements = new List<FiqasResponseElement>();
            this.timestamp = Datetime.now();
        }
        
        public FiqasResponseElement getFirstElement() {
            if (this.elements != null && this.elements.size() > 0 ) return elements[0];
            else return null;
        }
    }
    public class FiqasResponseElement {
    	public String status;
        public String reason;
        public Map<String,String> data;
        
        public Boolean succes() {
            return (this.status == 'OK');
        }
    }

}